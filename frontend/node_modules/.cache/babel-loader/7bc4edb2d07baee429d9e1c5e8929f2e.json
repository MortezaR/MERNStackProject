{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/components/solo/solo.jsx\";\nimport React from 'react';\nimport Game from '../../client/game';\nimport Sound from 'react-sound';\nimport worldMusic from '../../assets/sound/gflop.mp3';\n\nclass SoloGameCanvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleRightClick = this.handleRightClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.game = null;\n    this.canvas = null;\n    this.socket = this.props.socket;\n    this.state = {\n      sound: 'Sound.status.PAUSED'\n    };\n  }\n\n  playGame() {\n    this.game = new Game(this.props.myId);\n    this.game.solo = true;\n    this.socket.on('newWolf', playerData => {\n      console.log('new wolf incoming');\n      this.game.addNewPlayer(playerData, true);\n    });\n    this.socket.on('newPiglet', playerData => this.game.addNewPlayer(playerData, false));\n    this.socket.on('endGame', () => {\n      this.game.gameOver = true;\n      setTimeout(() => {\n        this.props.backToInstructions();\n      }, 5000);\n    });\n    this.socket.on('disconnectHost', () => this.disconnectHost());\n    this.socket.on('updateGame', (playerData, gameData, gameInfo) => this.game.gameLoop(playerData, gameData, gameInfo));\n    setTimeout(() => {\n      let data = {\n        roomName: this.props.roomName,\n        roomId: this.props.roomId,\n        map: this.props.map\n      };\n      if (this.props.host) this.socket.emit('soloPlayerReady', data);\n    }, 1000);\n  }\n\n  disconnectHost() {\n    this.game.gameOver = true;\n    this.props.backToLobby();\n  }\n\n  handleClick(e) {\n    if (this.game.canvas && !this.game.gameOver) {\n      const rect = this.game.canvas.getBoundingClientRect();\n      const canvasX = e.clientX - rect.left;\n      const canvasY = e.clientY - rect.top;\n      let clickPos = [canvasX + this.game.camera.xView, canvasY + this.game.camera.yView];\n      let moveData = {\n        clickPos,\n        type: \"move\",\n        gameId: this.props.myId\n      };\n      this.socket.emit('newClickMove', moveData);\n    }\n  }\n\n  handleRightClick(e) {\n    e.preventDefault();\n\n    if (this.game.canvas && !this.game.gameOver) {\n      let clickPos = [e.clientX + this.game.camera.xView, e.clientY + this.game.camera.yView];\n      this.game.player.attacking = true;\n      let moveData = {\n        clickPos,\n        type: \"attack\",\n        gameId: this.props.myId\n      };\n      this.socket.emit('newClickMove', moveData);\n    }\n  }\n\n  handleKeyPress(e) {\n    if (this.game.canvas && !this.game.gameOver) {\n      e.preventDefault();\n      let clickPos = [e.clientX + this.game.camera.xView, e.clientY + this.game.camera.yView];\n      let moveData = {\n        clickPos,\n        type: \"trap\",\n        gameId: this.props.myId\n      };\n      this.socket.emit('newClickMove', moveData);\n    }\n  }\n\n  componentDidMount() {\n    this.playGame();\n    window.addEventListener('keypress', this.handleKeyPress);\n    this.setState({\n      sound: 'Sound.status.PLAYING'\n    });\n  }\n\n  render() {\n    let width = window.innerWidth > 1600 ? 1600 : window.innerWidth;\n    let height = window.innerHeight > 800 ? 800 : window.innerHeight;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"canvas\",\n      className: \"game-canvas\",\n      onClick: this.handleClick,\n      onContextMenu: this.handleRightClick,\n      width: width,\n      height: height - 55,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Sound, {\n      url: worldMusic,\n      onClick: this.handleSoundClick,\n      playStatus: `PLAYING`,\n      playFromPosition: 30\n      /* in milliseconds */\n      ,\n      loop: true,\n      volume: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SoloGameCanvas;","map":{"version":3,"sources":["/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/components/solo/solo.jsx"],"names":["React","Game","Sound","worldMusic","SoloGameCanvas","Component","constructor","props","handleClick","bind","handleRightClick","handleKeyPress","game","canvas","socket","state","sound","playGame","myId","solo","on","playerData","console","log","addNewPlayer","gameOver","setTimeout","backToInstructions","disconnectHost","gameData","gameInfo","gameLoop","data","roomName","roomId","map","host","emit","backToLobby","e","rect","getBoundingClientRect","canvasX","clientX","left","canvasY","clientY","top","clickPos","camera","xView","yView","moveData","type","gameId","preventDefault","player","attacking","componentDidMount","window","addEventListener","setState","render","width","innerWidth","height","innerHeight","handleSoundClick"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Game from '../../client/game'\nimport Sound from 'react-sound';\nimport worldMusic from '../../assets/sound/gflop.mp3';\n\nclass SoloGameCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleRightClick = this.handleRightClick.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.game = null;\n        this.canvas = null;\n        this.socket = this.props.socket;\n        this.state = {\n            sound: 'Sound.status.PAUSED'\n        }\n    }\n\n    playGame() {\n        this.game = new Game(this.props.myId);\n        this.game.solo = true;\n        this.socket.on('newWolf', (playerData) => {\n            console.log('new wolf incoming')\n            this.game.addNewPlayer(playerData, true);\n        })\n        this.socket.on('newPiglet', (playerData) => this.game.addNewPlayer(playerData, false))\n        this.socket.on('endGame', () => {\n            this.game.gameOver = true;\n            setTimeout(() => {\n                this.props.backToInstructions();\n            }, 5000)\n        })\n        this.socket.on('disconnectHost', () => this.disconnectHost())\n        this.socket.on('updateGame', (playerData, gameData, gameInfo) => this.game.gameLoop(playerData, gameData, gameInfo))\n        setTimeout(() => {\n            let data = { roomName: this.props.roomName, roomId: this.props.roomId, map: this.props.map }\n            if (this.props.host) this.socket.emit('soloPlayerReady', data)\n        }, 1000);\n    }\n\n    disconnectHost() {\n        this.game.gameOver = true;\n        this.props.backToLobby();\n    }\n\n    handleClick(e) {\n        if (this.game.canvas && !this.game.gameOver) {\n            const rect = this.game.canvas.getBoundingClientRect()\n            const canvasX = e.clientX - rect.left\n            const canvasY = e.clientY - rect.top\n            let clickPos = [canvasX + this.game.camera.xView, canvasY + this.game.camera.yView]\n            let moveData = { clickPos, type: \"move\", gameId: this.props.myId }\n            this.socket.emit('newClickMove', moveData)\n        }\n    }\n\n    handleRightClick(e) {\n        e.preventDefault();\n        if (this.game.canvas && !this.game.gameOver) {\n            let clickPos = [e.clientX + this.game.camera.xView, e.clientY + this.game.camera.yView];\n            this.game.player.attacking = true;\n            let moveData = { clickPos, type: \"attack\", gameId: this.props.myId }\n            this.socket.emit('newClickMove', moveData);\n        }\n    }\n\n    handleKeyPress(e) {\n        if (this.game.canvas && !this.game.gameOver) {\n            e.preventDefault();\n            let clickPos = [e.clientX + this.game.camera.xView, e.clientY + this.game.camera.yView]\n            let moveData = { clickPos, type: \"trap\", gameId: this.props.myId }\n            this.socket.emit('newClickMove', moveData)\n        }\n    }\n\n    componentDidMount() {\n        this.playGame();\n        window.addEventListener('keypress', this.handleKeyPress);\n        this.setState({\n            sound: 'Sound.status.PLAYING'\n        })\n\n    }\n\n    render() {\n        let width = window.innerWidth > 1600 ? 1600 : window.innerWidth\n        let height = window.innerHeight > 800 ? 800 : window.innerHeight\n        return (\n            <div>\n                <canvas\n                    id=\"canvas\"\n                    className=\"game-canvas\"\n                    onClick={this.handleClick}\n                    onContextMenu={this.handleRightClick}\n                    width={width}\n                    height={height - 55}>\n                </canvas>\n                <Sound\n                    url={worldMusic}\n                    onClick={this.handleSoundClick}\n                    playStatus={`PLAYING`}\n                    playFromPosition={30 /* in milliseconds */}\n                    loop={true}\n                    volume={1}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SoloGameCanvas\n"]},"metadata":{},"sourceType":"module"}