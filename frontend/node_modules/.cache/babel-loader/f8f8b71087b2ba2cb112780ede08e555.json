{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/components/canvas/canvas.jsx\";\nimport React from 'react';\nimport './canvas.scss';\nimport foodIcon from '../../assets/images/food_icon.png';\nimport rockIcon from '../../assets/images/rock_icon.png';\nimport teleporterIcon from '../../assets/images/teleporter_icon.png';\nimport destinationIcon from '../../assets/images/destination_icon.png';\nimport hTerminalIcon from '../../assets/images/hTerminal_icon.png';\nimport depositIcon from '../../assets/images/deposit_icon.png';\nimport houseIcon from '../../assets/images/house_icon.png';\nimport worldMap from '../../assets/images/worldmap1.png';\nimport MapEditorMenuContainer from '../map_editor_menu/map_editor_menu_container';\nimport axios from 'axios';\nconst GAME_DIMENSIONX = 5000;\nconst GAME_DIMENSIONY = 5000;\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = this.refs.canvas;\n    this.ctx = null;\n    this.image = new Image();\n    this.image.src = worldMap;\n    this.state = {\n      canvas: this.refs.canvas,\n      rockIndex: 0,\n      foodIndex: 0,\n      teleporterIndex: 0,\n      hTerminalIndex: 0,\n      depositIndex: 0,\n      foods: {},\n      rocks: {},\n      teleporters: {},\n      hTerminals: {},\n      deposits: {},\n      houses: {},\n      radius: 70,\n      imgLoaded: false,\n      title: '',\n      mapId: '',\n      clickEffect: 'obstacle',\n      hidden: 'hidden'\n    }; //functions\n\n    this.getCursorPosition = this.getCursorPosition.bind(this);\n    this.intersectRect = this.intersectRect.bind(this);\n    this.callbackTest = this.callbackTest.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleClickEffect = this.handleClickEffect.bind(this);\n    this.handleOverlap = this.handleOverlap.bind(this);\n  }\n\n  componentDidMount() {\n    this.canvas = this.refs.canvas;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.drawImage(this.image, 0, 0); //This will axios call based on url\n    //If url is undefined, then error in console but nothing breaks\n\n    if (this.props.mapId) {\n      axios.get(`/api/maps/${this.props.mapId}`).then(map => {\n        this.setState({\n          rockIndex: map.data.objects.rockIndex,\n          foodIndex: map.data.objects.foodIndex,\n          foods: map.data.objects.foods,\n          rocks: map.data.objects.rocks,\n          teleporters: map.data.objects.teleporters,\n          hTerminals: map.data.objects.hTerminals,\n          deposits: map.data.objects.deposits,\n          houses: map.data.objects.houses,\n          title: map.data.title\n        });\n      });\n    }\n  }\n\n  handleOverlap() {\n    this.setState({\n      hidden: 'fadein'\n    });\n    setTimeout(() => this.setState({\n      hidden: 'fadeout'\n    }), 2000);\n  }\n\n  handleClickEffect(clickEffect) {\n    this.setState({\n      clickEffect: clickEffect\n    });\n  }\n\n  handleSave(title) {\n    return e => {\n      e.preventDefault();\n      const map = {\n        user: this.props.currentUser.id,\n        title: title,\n        objects: {\n          rockIndex: this.state.rockIndex,\n          foodIndex: this.state.foodIndex,\n          teleporterIndex: this.state.teleporterIndex,\n          hTerminalIndex: this.state.hTerminalIndex,\n          depositIndex: this.state.depositIndex,\n          foods: this.state.foods,\n          rocks: this.state.rocks,\n          teleporters: this.state.teleporters,\n          hTerminals: this.state.hTerminals,\n          deposits: this.state.deposits,\n          houses: this.state.houses\n        }\n      };\n\n      if (this.props.mapId) {\n        axios.put(`/api/maps/${this.props.mapId}`, map).then(() => this.props.history.push(\"/profile\"));\n      } else {\n        axios.post('/api/maps/', map);\n      }\n    };\n  }\n\n  callbackTest() {\n    this.setState({\n      imgLoaded: true\n    });\n  }\n\n  intersectRect(clickX, clickY, r2) {\n    return !(r2.x - 150 > clickX + 70 || r2.x + 150 < clickX - 70 || r2.y - 130 > clickY + 70 || r2.y + 130 < clickY - 70);\n  }\n\n  getCursorPosition(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    const canvasx = event.clientX - rect.left;\n    const canvasy = event.clientY - rect.top;\n    console.log(\"x: \" + canvasx + \" y: \" + canvasy);\n\n    switch (this.state.clickEffect) {\n      case 'remove':\n        Object.keys(this.state.rocks).forEach(rockKey => {\n          if (Math.sqrt((canvasx - this.state.rocks[rockKey].x) * (canvasx - this.state.rocks[rockKey].x) + (canvasy - this.state.rocks[rockKey].y) * (canvasy - this.state.rocks[rockKey].y)) < this.state.radius) {\n            let newState = this.state.rocks;\n            delete newState[rockKey];\n            this.setState({\n              rocks: Object.assign({}, newState)\n            });\n          }\n        });\n        Object.keys(this.state.foods).forEach(foodKey => {\n          if (Math.sqrt((canvasx - this.state.foods[foodKey].x) * (canvasx - this.state.foods[foodKey].x) + (canvasy - this.state.foods[foodKey].y) * (canvasy - this.state.foods[foodKey].y)) < this.state.radius) {\n            let newState = this.state.foods;\n            delete newState[foodKey];\n            this.setState({\n              foods: Object.assign({}, newState)\n            });\n          }\n        });\n        Object.keys(this.state.teleporters).forEach(teleporterKey => {\n          if (Math.sqrt((canvasx - this.state.teleporters[teleporterKey].x) * (canvasx - this.state.teleporters[teleporterKey].x) + (canvasy - this.state.teleporters[teleporterKey].y) * (canvasy - this.state.teleporters[teleporterKey].y)) < this.state.radius) {\n            let newState = this.state.teleporters;\n            delete newState[teleporterKey];\n            this.setState({\n              teleporters: Object.assign({}, newState)\n            });\n          }\n        });\n        Object.keys(this.state.hTerminals).forEach(hTerminalKey => {\n          if (Math.sqrt((canvasx - this.state.hTerminals[hTerminalKey].x) * (canvasx - this.state.hTerminals[hTerminalKey].x) + (canvasy - this.state.hTerminals[hTerminalKey].y) * (canvasy - this.state.hTerminals[hTerminalKey].y)) < this.state.radius) {\n            let newState = this.state.hTerminals;\n            delete newState[hTerminalKey];\n            this.setState({\n              hTerminals: Object.assign({}, newState)\n            });\n          }\n        });\n        Object.keys(this.state.deposits).forEach(depositKey => {\n          if (Math.sqrt((canvasx - this.state.deposits[depositKey].x) * (canvasx - this.state.deposits[depositKey].x) + (canvasy - this.state.deposits[depositKey].y) * (canvasy - this.state.deposits[depositKey].y)) < this.state.radius) {\n            let newState = this.state.deposits;\n            delete newState[depositKey];\n            this.setState({\n              deposits: Object.assign({}, newState)\n            });\n          }\n        });\n        break;\n\n      case 'obstacle':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          this.setState({\n            rocks: Object.assign({}, this.state.rocks, {\n              [this.state.rockIndex]: {\n                x: canvasx,\n                y: canvasy\n              }\n            }),\n            rockIndex: this.state.rockIndex + 1\n          });\n          break;\n        }\n\n      case 'food':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          this.setState({\n            foods: Object.assign({}, this.state.foods, {\n              [this.state.foodIndex]: {\n                x: canvasx,\n                y: canvasy\n              }\n            }),\n            foodIndex: this.state.foodIndex + 1\n          });\n          break;\n        }\n\n      case 'teleporter':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          this.setState({\n            teleporters: Object.assign({}, this.state.teleporters, {\n              [this.state.teleporterIndex]: {\n                x: canvasx,\n                y: canvasy\n              }\n            }),\n            clickEffect: 'destination'\n          });\n          break;\n        }\n\n      case 'destination':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          let newState = Object.assign({}, this.state.teleporters);\n          let indexed = Object.assign({}, this.state.teleporters[this.state.teleporterIndex], {\n            newX: canvasx,\n            newY: canvasy\n          });\n          newState[this.state.teleporterIndex] = indexed;\n          console.log(indexed);\n          console.log(`before ${this.state.teleporters}`);\n          this.setState({\n            teleporters: newState,\n            teleporterIndex: this.state.teleporterIndex + 1,\n            clickEffect: 'teleporter'\n          });\n          console.log(this.state.teleporters);\n          break;\n        }\n\n      case 'hTerminal':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          this.setState({\n            hTerminals: Object.assign({}, this.state.hTerminals, {\n              [this.state.hTerminalIndex]: {\n                x: canvasx,\n                y: canvasy\n              }\n            }),\n            hTerminalIndex: this.state.hTerminalIndex + 1\n          });\n          break;\n        }\n\n      case 'deposit':\n        if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\n          console.log('overlapped');\n          this.handleOverlap();\n          break;\n        } else {\n          this.setState({\n            deposits: Object.assign({}, this.state.deposits, {\n              [this.state.depositIndex]: {\n                x: canvasx,\n                y: canvasy\n              }\n            }),\n            depositIndex: this.state.depositIndex + 1\n          });\n          break;\n        }\n\n      case 'house':\n        this.setState({\n          houses: Object.assign({}, this.state.houses, {\n            [0]: {\n              x: canvasx,\n              y: canvasy\n            }\n          })\n        });\n        break;\n\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    if (this.ctx) {\n      this.ctx.clearRect(0, 0, GAME_DIMENSIONX, GAME_DIMENSIONY);\n      this.ctx.drawImage(this.image, 0, 0);\n      Object.values(this.state.rocks).forEach(rock => {\n        this.ctx.drawImage(this.refs.rockIcon, 0, 0, 135, 135, rock.x - 60, rock.y - 60, 135, 135);\n      });\n      Object.values(this.state.foods).forEach(food => {\n        this.ctx.drawImage(this.refs.foodIcon, 0, 0, 135, 135, food.x - 60, food.y - 60, 135, 135);\n      });\n      Object.values(this.state.teleporters).forEach(teleporter => {\n        this.ctx.drawImage(this.refs.teleporterIcon, 0, 0, 135, 135, teleporter.x - 60, teleporter.y - 60, 135, 135);\n        this.ctx.drawImage(this.refs.destinationIcon, 0, 0, 135, 135, teleporter.newX - 60, teleporter.newY - 60, 135, 135);\n        console.log(this.state.teleporters);\n      });\n      Object.values(this.state.hTerminals).forEach(hTerminal => {\n        this.ctx.drawImage(this.refs.hTerminalIcon, 0, 0, 135, 135, hTerminal.x - 60, hTerminal.y - 60, 135, 135);\n      });\n      Object.values(this.state.deposits).forEach(deposit => {\n        this.ctx.drawImage(this.refs.depositIcon, 0, 0, 135, 135, deposit.x - 60, deposit.y - 60, 135, 135);\n      });\n      Object.values(this.state.houses).forEach(house => {\n        this.ctx.drawImage(this.refs.houseIcon, 0, 0, 300, 260, house.x - 150, house.y - 130, 300, 260);\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"testsize\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"canvas\",\n      onKeyPress: this.handleKey,\n      onClick: this.getCursorPosition,\n      ref: \"canvas\",\n      className: this.state.clickEffect,\n      width: 5000,\n      height: 5000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"foodIcon\",\n      alt: \"\",\n      src: foodIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"rockIcon\",\n      alt: \"\",\n      src: rockIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"houseIcon\",\n      alt: \"\",\n      src: houseIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"teleporterIcon\",\n      alt: \"\",\n      src: teleporterIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"destinationIcon\",\n      alt: \"\",\n      src: destinationIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"hTerminalIcon\",\n      alt: \"\",\n      src: hTerminalIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"depositIcon\",\n      alt: \"\",\n      src: depositIcon,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      ref: \"worldMap\",\n      alt: \"\",\n      onLoad: this.callbackTest,\n      src: worldMap,\n      className: \"hidden\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: `overlap ${this.state.hidden}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Cannot place object on starting position\")), React.createElement(MapEditorMenuContainer, {\n      title: this.state.title,\n      handleClickEffect: this.handleClickEffect,\n      handleSave: this.handleSave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/components/canvas/canvas.jsx"],"names":["React","foodIcon","rockIcon","teleporterIcon","destinationIcon","hTerminalIcon","depositIcon","houseIcon","worldMap","MapEditorMenuContainer","axios","GAME_DIMENSIONX","GAME_DIMENSIONY","Canvas","Component","constructor","props","canvas","refs","ctx","image","Image","src","state","rockIndex","foodIndex","teleporterIndex","hTerminalIndex","depositIndex","foods","rocks","teleporters","hTerminals","deposits","houses","radius","imgLoaded","title","mapId","clickEffect","hidden","getCursorPosition","bind","intersectRect","callbackTest","handleSave","handleClickEffect","handleOverlap","componentDidMount","getContext","drawImage","get","then","map","setState","data","objects","setTimeout","e","preventDefault","user","currentUser","id","put","history","push","post","clickX","clickY","r2","x","y","event","rect","getBoundingClientRect","canvasx","clientX","left","canvasy","clientY","top","console","log","Object","keys","forEach","rockKey","Math","sqrt","newState","assign","foodKey","teleporterKey","hTerminalKey","depositKey","indexed","newX","newY","render","clearRect","values","rock","food","teleporter","hTerminal","deposit","house","handleKey"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AAGA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,sBAAP,MAAmC,8CAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,eAAe,GAAG,IAAxB;AACA,MAAMC,eAAe,GAAG,IAAxB;;AAEA,MAAMC,MAAN,SAAqBb,KAAK,CAACc,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,KAAKC,IAAL,CAAUD,MAAxB;AACA,SAAKE,GAAL,GAAW,IAAX;AACA,SAAKC,KAAL,GAAa,IAAIC,KAAJ,EAAb;AACA,SAAKD,KAAL,CAAWE,GAAX,GAAiBd,QAAjB;AACA,SAAKe,KAAL,GAAa;AACXN,MAAAA,MAAM,EAAE,KAAKC,IAAL,CAAUD,MADP;AAEXO,MAAAA,SAAS,EAAE,CAFA;AAGXC,MAAAA,SAAS,EAAE,CAHA;AAIXC,MAAAA,eAAe,EAAE,CAJN;AAKXC,MAAAA,cAAc,EAAE,CALL;AAMXC,MAAAA,YAAY,EAAE,CANH;AAOXC,MAAAA,KAAK,EAAE,EAPI;AAQXC,MAAAA,KAAK,EAAE,EARI;AASXC,MAAAA,WAAW,EAAC,EATD;AAUXC,MAAAA,UAAU,EAAE,EAVD;AAWXC,MAAAA,QAAQ,EAAE,EAXC;AAYXC,MAAAA,MAAM,EAAE,EAZG;AAaXC,MAAAA,MAAM,EAAE,EAbG;AAcXC,MAAAA,SAAS,EAAE,KAdA;AAeXC,MAAAA,KAAK,EAAE,EAfI;AAgBXC,MAAAA,KAAK,EAAE,EAhBI;AAiBXC,MAAAA,WAAW,EAAE,UAjBF;AAkBXC,MAAAA,MAAM,EAAE;AAlBG,KAAb,CANgB,CA2BhB;;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKI,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBJ,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKK,aAAL,GAAqB,KAAKA,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AACDM,EAAAA,iBAAiB,GAAG;AAClB,SAAK/B,MAAL,GAAc,KAAKC,IAAL,CAAUD,MAAxB;AACA,SAAKE,GAAL,GAAW,KAAKF,MAAL,CAAYgC,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAK9B,GAAL,CAAS+B,SAAT,CAAmB,KAAK9B,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,EAHkB,CAKlB;AACA;;AACA,QAAI,KAAKJ,KAAL,CAAWsB,KAAf,EAAsB;AACpB5B,MAAAA,KAAK,CAACyC,GAAN,CAAW,aAAY,KAAKnC,KAAL,CAAWsB,KAAM,EAAxC,EACCc,IADD,CACMC,GAAG,IAAI;AACX,aAAKC,QAAL,CAAc;AACZ9B,UAAAA,SAAS,EAAE6B,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBhC,SADhB;AAEZC,UAAAA,SAAS,EAAE4B,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB/B,SAFhB;AAGZI,UAAAA,KAAK,EAAEwB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB3B,KAHZ;AAIZC,UAAAA,KAAK,EAAEuB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB1B,KAJZ;AAKZC,UAAAA,WAAW,EAAEsB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBzB,WALlB;AAMZC,UAAAA,UAAU,EAAEqB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBxB,UANjB;AAOZC,UAAAA,QAAQ,EAAEoB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBvB,QAPf;AAQZC,UAAAA,MAAM,EAAEmB,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBtB,MARb;AASZG,UAAAA,KAAK,EAAEgB,GAAG,CAACE,IAAJ,CAASlB;AATJ,SAAd;AAWD,OAbD;AAcD;AACF;;AAEDU,EAAAA,aAAa,GAAG;AACd,SAAKO,QAAL,CAAc;AACZd,MAAAA,MAAM,EAAE;AADI,KAAd;AAGAiB,IAAAA,UAAU,CAAC,MAAI,KAAKH,QAAL,CAAc;AAC3Bd,MAAAA,MAAM,EAAE;AADmB,KAAd,CAAL,EAEN,IAFM,CAAV;AAGD;;AAEDM,EAAAA,iBAAiB,CAACP,WAAD,EAAc;AAC7B,SAAKe,QAAL,CAAc;AACVf,MAAAA,WAAW,EAAEA;AADH,KAAd;AAGD;;AAEDM,EAAAA,UAAU,CAAER,KAAF,EAAS;AACjB,WAAOqB,CAAC,IAAI;AACVA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMN,GAAG,GAAG;AACVO,QAAAA,IAAI,EAAE,KAAK5C,KAAL,CAAW6C,WAAX,CAAuBC,EADnB;AAEVzB,QAAAA,KAAK,EAAEA,KAFG;AAGVmB,QAAAA,OAAO,EAAE;AACLhC,UAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SADjB;AAELC,UAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAFjB;AAGLC,UAAAA,eAAe,EAAE,KAAKH,KAAL,CAAWG,eAHvB;AAILC,UAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWI,cAJtB;AAKLC,UAAAA,YAAY,EAAE,KAAKL,KAAL,CAAWK,YALpB;AAMLC,UAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM,KANb;AAOLC,UAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWO,KAPb;AAQLC,UAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WARnB;AASLC,UAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWS,UATlB;AAULC,UAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWU,QAVhB;AAWLC,UAAAA,MAAM,EAAE,KAAKX,KAAL,CAAWW;AAXd;AAHC,OAAZ;;AAiBA,UAAI,KAAKlB,KAAL,CAAWsB,KAAf,EAAsB;AACpB5B,QAAAA,KAAK,CAACqD,GAAN,CAAW,aAAY,KAAK/C,KAAL,CAAWsB,KAAM,EAAxC,EAA2Ce,GAA3C,EAAgDD,IAAhD,CAAqD,MACnD,KAAKpC,KAAL,CAAWgD,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB,CADF;AAGD,OAJD,MAKK;AACHvD,QAAAA,KAAK,CAACwD,IAAN,CAAW,YAAX,EAAyBb,GAAzB;AACD;AACF,KA3BD;AA4BD;;AAEDT,EAAAA,YAAY,GAAI;AACd,SAAKU,QAAL,CAAc;AACZlB,MAAAA,SAAS,EAAE;AADC,KAAd;AAGD;;AAEDO,EAAAA,aAAa,CAACwB,MAAD,EAASC,MAAT,EAAiBC,EAAjB,EAAqB;AAChC,WAAO,EAAEA,EAAE,CAACC,CAAH,GAAK,GAAL,GAAWH,MAAM,GAAC,EAAlB,IACAE,EAAE,CAACC,CAAH,GAAK,GAAL,GAAWH,MAAM,GAAC,EADlB,IAEAE,EAAE,CAACE,CAAH,GAAK,GAAL,GAAWH,MAAM,GAAC,EAFlB,IAGAC,EAAE,CAACE,CAAH,GAAK,GAAL,GAAWH,MAAM,GAAC,EAHpB,CAAP;AAID;;AAID3B,EAAAA,iBAAiB,CAAC+B,KAAD,EAAQ;AACrB,UAAMC,IAAI,GAAG,KAAKxD,MAAL,CAAYyD,qBAAZ,EAAb;AACA,UAAMC,OAAO,GAAGH,KAAK,CAACI,OAAN,GAAgBH,IAAI,CAACI,IAArC;AACA,UAAMC,OAAO,GAAGN,KAAK,CAACO,OAAN,GAAgBN,IAAI,CAACO,GAArC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAQP,OAAR,GAAkB,MAAlB,GAA2BG,OAAvC;;AACA,YAAO,KAAKvD,KAAL,CAAWgB,WAAlB;AACE,WAAK,QAAL;AACI4C,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAK7D,KAAL,CAAWO,KAAvB,EAA8BuD,OAA9B,CAAsCC,OAAO,IAAI;AAC/C,cAAIC,IAAI,CAACC,IAAL,CAAU,CAACb,OAAO,GAAC,KAAKpD,KAAL,CAAWO,KAAX,CAAiBwD,OAAjB,EAA0BhB,CAAnC,KAAuCK,OAAO,GAAC,KAAKpD,KAAL,CAAWO,KAAX,CAAiBwD,OAAjB,EAA0BhB,CAAzE,IAA8E,CAACQ,OAAO,GAAC,KAAKvD,KAAL,CAAWO,KAAX,CAAiBwD,OAAjB,EAA0Bf,CAAnC,KAAuCO,OAAO,GAAC,KAAKvD,KAAL,CAAWO,KAAX,CAAiBwD,OAAjB,EAA0Bf,CAAzE,CAAxF,IAAuK,KAAKhD,KAAL,CAAWY,MAAtL,EAA8L;AAC5L,gBAAIsD,QAAQ,GAAG,KAAKlE,KAAL,CAAWO,KAA1B;AACA,mBAAO2D,QAAQ,CAACH,OAAD,CAAf;AACA,iBAAKhC,QAAL,CAAc;AACZxB,cAAAA,KAAK,EAAEqD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBD,QAAlB;AADK,aAAd;AAGD;AACF,SARD;AASAN,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAK7D,KAAL,CAAWM,KAAvB,EAA8BwD,OAA9B,CAAsCM,OAAO,IAAI;AAC/C,cAAIJ,IAAI,CAACC,IAAL,CAAU,CAACb,OAAO,GAAC,KAAKpD,KAAL,CAAWM,KAAX,CAAiB8D,OAAjB,EAA0BrB,CAAnC,KAAuCK,OAAO,GAAC,KAAKpD,KAAL,CAAWM,KAAX,CAAiB8D,OAAjB,EAA0BrB,CAAzE,IAA8E,CAACQ,OAAO,GAAC,KAAKvD,KAAL,CAAWM,KAAX,CAAiB8D,OAAjB,EAA0BpB,CAAnC,KAAuCO,OAAO,GAAC,KAAKvD,KAAL,CAAWM,KAAX,CAAiB8D,OAAjB,EAA0BpB,CAAzE,CAAxF,IAAuK,KAAKhD,KAAL,CAAWY,MAAtL,EAA8L;AAC5L,gBAAIsD,QAAQ,GAAG,KAAKlE,KAAL,CAAWM,KAA1B;AACA,mBAAO4D,QAAQ,CAACE,OAAD,CAAf;AACA,iBAAKrC,QAAL,CAAc;AACZzB,cAAAA,KAAK,EAAEsD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBD,QAAlB;AADK,aAAd;AAGD;AACF,SARD;AASAN,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAK7D,KAAL,CAAWQ,WAAvB,EAAoCsD,OAApC,CAA4CO,aAAa,IAAI;AAC3D,cAAIL,IAAI,CAACC,IAAL,CAAU,CAACb,OAAO,GAAC,KAAKpD,KAAL,CAAWQ,WAAX,CAAuB6D,aAAvB,EAAsCtB,CAA/C,KAAmDK,OAAO,GAAC,KAAKpD,KAAL,CAAWQ,WAAX,CAAuB6D,aAAvB,EAAsCtB,CAAjG,IAAsG,CAACQ,OAAO,GAAC,KAAKvD,KAAL,CAAWQ,WAAX,CAAuB6D,aAAvB,EAAsCrB,CAA/C,KAAmDO,OAAO,GAAC,KAAKvD,KAAL,CAAWQ,WAAX,CAAuB6D,aAAvB,EAAsCrB,CAAjG,CAAhH,IAAuN,KAAKhD,KAAL,CAAWY,MAAtO,EAA8O;AAC5O,gBAAIsD,QAAQ,GAAG,KAAKlE,KAAL,CAAWQ,WAA1B;AACA,mBAAO0D,QAAQ,CAACG,aAAD,CAAf;AACA,iBAAKtC,QAAL,CAAc;AACZvB,cAAAA,WAAW,EAAEoD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBD,QAAlB;AADD,aAAd;AAGD;AACF,SARD;AASAN,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAK7D,KAAL,CAAWS,UAAvB,EAAmCqD,OAAnC,CAA2CQ,YAAY,IAAI;AACzD,cAAIN,IAAI,CAACC,IAAL,CAAU,CAACb,OAAO,GAAC,KAAKpD,KAAL,CAAWS,UAAX,CAAsB6D,YAAtB,EAAoCvB,CAA7C,KAAiDK,OAAO,GAAC,KAAKpD,KAAL,CAAWS,UAAX,CAAsB6D,YAAtB,EAAoCvB,CAA7F,IAAkG,CAACQ,OAAO,GAAC,KAAKvD,KAAL,CAAWS,UAAX,CAAsB6D,YAAtB,EAAoCtB,CAA7C,KAAiDO,OAAO,GAAC,KAAKvD,KAAL,CAAWS,UAAX,CAAsB6D,YAAtB,EAAoCtB,CAA7F,CAA5G,IAA+M,KAAKhD,KAAL,CAAWY,MAA9N,EAAsO;AACpO,gBAAIsD,QAAQ,GAAG,KAAKlE,KAAL,CAAWS,UAA1B;AACA,mBAAOyD,QAAQ,CAACI,YAAD,CAAf;AACA,iBAAKvC,QAAL,CAAc;AACZtB,cAAAA,UAAU,EAAEmD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBD,QAAlB;AADA,aAAd;AAGD;AACF,SARD;AASAN,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAK7D,KAAL,CAAWU,QAAvB,EAAiCoD,OAAjC,CAAyCS,UAAU,IAAI;AACrD,cAAIP,IAAI,CAACC,IAAL,CAAU,CAACb,OAAO,GAAC,KAAKpD,KAAL,CAAWU,QAAX,CAAoB6D,UAApB,EAAgCxB,CAAzC,KAA6CK,OAAO,GAAC,KAAKpD,KAAL,CAAWU,QAAX,CAAoB6D,UAApB,EAAgCxB,CAArF,IAA0F,CAACQ,OAAO,GAAC,KAAKvD,KAAL,CAAWU,QAAX,CAAoB6D,UAApB,EAAgCvB,CAAzC,KAA6CO,OAAO,GAAC,KAAKvD,KAAL,CAAWU,QAAX,CAAoB6D,UAApB,EAAgCvB,CAArF,CAApG,IAA+L,KAAKhD,KAAL,CAAWY,MAA9M,EAAsN;AACpN,gBAAIsD,QAAQ,GAAG,KAAKlE,KAAL,CAAWU,QAA1B;AACA,mBAAOwD,QAAQ,CAACK,UAAD,CAAf;AACA,iBAAKxC,QAAL,CAAc;AACZrB,cAAAA,QAAQ,EAAEkD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkBD,QAAlB;AADE,aAAd;AAGD;AACF,SARD;AASA;;AACJ,WAAK,UAAL;AACE,YAAI,KAAKlE,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACpF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACH,SAJD,MAKK;AACH,eAAKO,QAAL,CAAc;AACZxB,YAAAA,KAAK,EAAEqD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWO,KAA7B,EAAoC;AAAC,eAAC,KAAKP,KAAL,CAAWC,SAAZ,GAAwB;AAAC8C,gBAAAA,CAAC,EAAEK,OAAJ;AAAaJ,gBAAAA,CAAC,EAAEO;AAAhB;AAAzB,aAApC,CADK;AAEZtD,YAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SAAX,GAAuB;AAFtB,WAAd;AAIA;AACD;;AACH,WAAK,MAAL;AACE,YAAI,KAAKD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACtF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACD,SAJD,MAKK;AACH,eAAKO,QAAL,CAAc;AACZzB,YAAAA,KAAK,EAAEsD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWM,KAA7B,EAAoC;AAAC,eAAC,KAAKN,KAAL,CAAWE,SAAZ,GAAwB;AAAC6C,gBAAAA,CAAC,EAAEK,OAAJ;AAAaJ,gBAAAA,CAAC,EAAEO;AAAhB;AAAzB,aAApC,CADK;AAEZrD,YAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAAX,GAAuB;AAFtB,WAAd;AAIA;AACD;;AACH,WAAK,YAAL;AACE,YAAI,KAAKF,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACtF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACD,SAJD,MAKK;AACH,eAAKO,QAAL,CAAc;AACZvB,YAAAA,WAAW,EAAEoD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWQ,WAA7B,EAA0C;AAAC,eAAC,KAAKR,KAAL,CAAWG,eAAZ,GAA8B;AAAC4C,gBAAAA,CAAC,EAAEK,OAAJ;AAAaJ,gBAAAA,CAAC,EAAEO;AAAhB;AAA/B,aAA1C,CADD;AAEZvC,YAAAA,WAAW,EAAE;AAFD,WAAd;AAIA;AACD;;AACH,WAAK,aAAL;AACI,YAAI,KAAKhB,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACtF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACD,SAJD,MAKK;AACH,cAAI0C,QAAQ,GAAGN,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWQ,WAA7B,CAAf;AACA,cAAIgE,OAAO,GAAGZ,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWQ,WAAX,CAAuB,KAAKR,KAAL,CAAWG,eAAlC,CAAlB,EAAsE;AAACsE,YAAAA,IAAI,EAAErB,OAAP;AAAgBsB,YAAAA,IAAI,EAAEnB;AAAtB,WAAtE,CAAd;AACAW,UAAAA,QAAQ,CAAC,KAAKlE,KAAL,CAAWG,eAAZ,CAAR,GAAuCqE,OAAvC;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAa,UAAS,KAAK3D,KAAL,CAAWQ,WAAY,EAA7C;AACA,eAAKuB,QAAL,CAAc;AACZvB,YAAAA,WAAW,EAAE0D,QADD;AAEZ/D,YAAAA,eAAe,EAAE,KAAKH,KAAL,CAAWG,eAAX,GAA6B,CAFlC;AAGZa,YAAAA,WAAW,EAAE;AAHD,WAAd;AAKA0C,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3D,KAAL,CAAWQ,WAAvB;AACA;AACD;;AACL,WAAK,WAAL;AACE,YAAI,KAAKR,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACtF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACD,SAJD,MAKK;AACH,eAAKO,QAAL,CAAc;AACZtB,YAAAA,UAAU,EAAEmD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWS,UAA7B,EAAyC;AAAC,eAAC,KAAKT,KAAL,CAAWI,cAAZ,GAA6B;AAAC2C,gBAAAA,CAAC,EAAEK,OAAJ;AAAaJ,gBAAAA,CAAC,EAAEO;AAAhB;AAA9B,aAAzC,CADA;AAEZnD,YAAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWI,cAAX,GAA4B;AAFhC,WAAd;AAIA;AACD;;AACH,WAAK,SAAL;AACE,YAAI,KAAKJ,KAAL,CAAWW,MAAX,CAAkB,CAAlB,KAAwB,KAAKS,aAAL,CAAmBgC,OAAnB,EAA4BG,OAA5B,EAAqC,KAAKvD,KAAL,CAAWW,MAAX,CAAkB,CAAlB,CAArC,CAA5B,EAAwF;AACtF+C,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,eAAKnC,aAAL;AACA;AACD,SAJD,MAKK;AACH,eAAKO,QAAL,CAAc;AACZrB,YAAAA,QAAQ,EAAEkD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWU,QAA7B,EAAuC;AAAC,eAAC,KAAKV,KAAL,CAAWK,YAAZ,GAA2B;AAAC0C,gBAAAA,CAAC,EAAEK,OAAJ;AAAaJ,gBAAAA,CAAC,EAAEO;AAAhB;AAA5B,aAAvC,CADE;AAEZlD,YAAAA,YAAY,EAAE,KAAKL,KAAL,CAAWK,YAAX,GAA0B;AAF5B,WAAd;AAIA;AACD;;AACH,WAAK,OAAL;AACE,aAAK0B,QAAL,CAAc;AACZpB,UAAAA,MAAM,EAAEiD,MAAM,CAACO,MAAP,CAAc,EAAd,EAAkB,KAAKnE,KAAL,CAAWW,MAA7B,EAAqC;AAAC,aAAC,CAAD,GAAK;AAACoC,cAAAA,CAAC,EAAEK,OAAJ;AAAaJ,cAAAA,CAAC,EAAEO;AAAhB;AAAN,WAArC;AADI,SAAd;AAGA;;AACF;AACE,eAAO,IAAP;AA3IJ;AA6IH;;AAECoB,EAAAA,MAAM,GAAG;AAEP,QAAI,KAAK/E,GAAT,EAAc;AACZ,WAAKA,GAAL,CAASgF,SAAT,CAAmB,CAAnB,EAAqB,CAArB,EAAuBxF,eAAvB,EAAwCC,eAAxC;AAEA,WAAKO,GAAL,CAAS+B,SAAT,CAAmB,KAAK9B,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC;AAGA+D,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWO,KAAzB,EAAgCuD,OAAhC,CAAwCgB,IAAI,IAAI;AAC9C,aAAKlF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUhB,QAA7B,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,GAA7C,EAAkD,GAAlD,EAAuDmG,IAAI,CAAC/B,CAAL,GAAO,EAA9D,EAAkE+B,IAAI,CAAC9B,CAAL,GAAO,EAAzE,EAA6E,GAA7E,EAAkF,GAAlF;AACD,OAFD;AAIAY,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWM,KAAzB,EAAgCwD,OAAhC,CAAwCiB,IAAI,IAAI;AAC9C,aAAKnF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUjB,QAA7B,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,GAA7C,EAAkD,GAAlD,EAAuDqG,IAAI,CAAChC,CAAL,GAAO,EAA9D,EAAkEgC,IAAI,CAAC/B,CAAL,GAAO,EAAzE,EAA6E,GAA7E,EAAkF,GAAlF;AACD,OAFD;AAGAY,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWQ,WAAzB,EAAsCsD,OAAtC,CAA8CkB,UAAU,IAAI;AAC1D,aAAKpF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUf,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,GAAnD,EAAwD,GAAxD,EAA6DoG,UAAU,CAACjC,CAAX,GAAa,EAA1E,EAA8EiC,UAAU,CAAChC,CAAX,GAAa,EAA3F,EAA+F,GAA/F,EAAoG,GAApG;AACA,aAAKpD,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUd,eAA7B,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,GAApD,EAAyD,GAAzD,EAA8DmG,UAAU,CAACP,IAAX,GAAgB,EAA9E,EAAkFO,UAAU,CAACN,IAAX,GAAgB,EAAlG,EAAsG,GAAtG,EAA2G,GAA3G;AACAhB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3D,KAAL,CAAWQ,WAAvB;AACD,OAJD;AAKAoD,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWS,UAAzB,EAAqCqD,OAArC,CAA6CmB,SAAS,IAAI;AACxD,aAAKrF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUb,aAA7B,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,GAAlD,EAAuD,GAAvD,EAA4DmG,SAAS,CAAClC,CAAV,GAAY,EAAxE,EAA4EkC,SAAS,CAACjC,CAAV,GAAY,EAAxF,EAA4F,GAA5F,EAAiG,GAAjG;AACD,OAFD;AAGAY,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWU,QAAzB,EAAmCoD,OAAnC,CAA2CoB,OAAO,IAAI;AACpD,aAAKtF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUZ,WAA7B,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,GAAhD,EAAqD,GAArD,EAA0DmG,OAAO,CAACnC,CAAR,GAAU,EAApE,EAAwEmC,OAAO,CAAClC,CAAR,GAAU,EAAlF,EAAsF,GAAtF,EAA2F,GAA3F;AACD,OAFD;AAGAY,MAAAA,MAAM,CAACiB,MAAP,CAAc,KAAK7E,KAAL,CAAWW,MAAzB,EAAiCmD,OAAjC,CAAyCqB,KAAK,IAAI;AAChD,aAAKvF,GAAL,CAAS+B,SAAT,CAAmB,KAAKhC,IAAL,CAAUX,SAA7B,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,GAA9C,EAAmD,GAAnD,EAAwDmG,KAAK,CAACpC,CAAN,GAAQ,GAAhE,EAAqEoC,KAAK,CAACnC,CAAN,GAAQ,GAA7E,EAAkF,GAAlF,EAAuF,GAAvF;AACD,OAFD;AAGD;;AACC,WACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAQ,MAAA,EAAE,EAAC,QAAX;AAAoB,MAAA,UAAU,EAAE,KAAKoC,SAArC;AAAgD,MAAA,OAAO,EAAE,KAAKlE,iBAA9D;AAAiF,MAAA,GAAG,EAAC,QAArF;AAA8F,MAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWgB,WAApH;AAAiI,MAAA,KAAK,EAAE,IAAxI;AAA8I,MAAA,MAAM,EAAE,IAAtJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIE;AAAK,MAAA,GAAG,EAAC,UAAT;AAAoB,MAAA,GAAG,EAAC,EAAxB;AAA2B,MAAA,GAAG,EAAEtC,QAAhC;AAA0C,MAAA,SAAS,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAK,MAAA,GAAG,EAAC,UAAT;AAAoB,MAAA,GAAG,EAAC,EAAxB;AAA2B,MAAA,GAAG,EAAEC,QAAhC;AAA0C,MAAA,SAAS,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME;AAAK,MAAA,GAAG,EAAC,WAAT;AAAqB,MAAA,GAAG,EAAC,EAAzB;AAA4B,MAAA,GAAG,EAAEK,SAAjC;AAA4C,MAAA,SAAS,EAAC,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE;AAAK,MAAA,GAAG,EAAC,gBAAT;AAA0B,MAAA,GAAG,EAAC,EAA9B;AAAiC,MAAA,GAAG,EAAEJ,cAAtC;AAAsD,MAAA,SAAS,EAAC,QAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE;AAAK,MAAA,GAAG,EAAC,iBAAT;AAA2B,MAAA,GAAG,EAAC,EAA/B;AAAkC,MAAA,GAAG,EAAEC,eAAvC;AAAwD,MAAA,SAAS,EAAC,QAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EASE;AAAK,MAAA,GAAG,EAAC,eAAT;AAAyB,MAAA,GAAG,EAAC,EAA7B;AAAgC,MAAA,GAAG,EAAEC,aAArC;AAAoD,MAAA,SAAS,EAAC,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE;AAAK,MAAA,GAAG,EAAC,aAAT;AAAuB,MAAA,GAAG,EAAC,EAA3B;AAA8B,MAAA,GAAG,EAAEC,WAAnC;AAAgD,MAAA,SAAS,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE;AAAK,MAAA,GAAG,EAAC,UAAT;AAAoB,MAAA,GAAG,EAAC,EAAxB;AAA2B,MAAA,MAAM,EAAE,KAAKsC,YAAxC;AAAsD,MAAA,GAAG,EAAEpC,QAA3D;AAAqE,MAAA,SAAS,EAAC,QAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAYE;AAAK,MAAA,SAAS,EAAG,WAAU,KAAKe,KAAL,CAAWiB,MAAO,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADN,CAZF,EAeE,oBAAC,sBAAD;AAAwB,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWc,KAA1C;AAAiD,MAAA,iBAAiB,EAAE,KAAKS,iBAAzE;AAA4F,MAAA,UAAU,EAAE,KAAKD,UAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADF;AAmBD;;AA/T8B;;AAkUrC,eAAehC,MAAf","sourcesContent":["import React from 'react';\r\nimport './canvas.scss';\r\nimport foodIcon from '../../assets/images/food_icon.png'\r\nimport rockIcon from '../../assets/images/rock_icon.png'\r\nimport teleporterIcon from '../../assets/images/teleporter_icon.png'\r\nimport destinationIcon from '../../assets/images/destination_icon.png'\r\nimport hTerminalIcon from '../../assets/images/hTerminal_icon.png'\r\nimport depositIcon from '../../assets/images/deposit_icon.png'\r\nimport houseIcon from '../../assets/images/house_icon.png'\r\n\r\n\r\nimport worldMap from '../../assets/images/worldmap1.png';\r\nimport MapEditorMenuContainer from '../map_editor_menu/map_editor_menu_container';\r\nimport axios from 'axios';\r\n\r\n\r\nconst GAME_DIMENSIONX = 5000;\r\nconst GAME_DIMENSIONY = 5000;\r\n\r\nclass Canvas extends React.Component {\r\n  constructor (props) {\r\n      super(props)\r\n      this.canvas = this.refs.canvas;\r\n      this.ctx = null;\r\n      this.image = new Image();\r\n      this.image.src = worldMap;\r\n      this.state = {\r\n        canvas: this.refs.canvas,\r\n        rockIndex: 0,\r\n        foodIndex: 0,\r\n        teleporterIndex: 0,\r\n        hTerminalIndex: 0,\r\n        depositIndex: 0,\r\n        foods: {},\r\n        rocks: {},\r\n        teleporters:{},\r\n        hTerminals: {},\r\n        deposits: {},\r\n        houses: {},\r\n        radius: 70,\r\n        imgLoaded: false,\r\n        title: '',\r\n        mapId: '',\r\n        clickEffect: 'obstacle',\r\n        hidden: 'hidden'\r\n\r\n      }\r\n      //functions\r\n      this.getCursorPosition = this.getCursorPosition.bind(this);\r\n      this.intersectRect = this.intersectRect.bind(this);\r\n      this.callbackTest = this.callbackTest.bind(this);\r\n      this.handleSave = this.handleSave.bind(this);\r\n      this.handleClickEffect = this.handleClickEffect.bind(this);\r\n      this.handleOverlap = this.handleOverlap.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.canvas = this.refs.canvas\r\n    this.ctx = this.canvas.getContext(\"2d\")\r\n    this.ctx.drawImage(this.image, 0, 0);\r\n\r\n    //This will axios call based on url\r\n    //If url is undefined, then error in console but nothing breaks\r\n    if (this.props.mapId) {\r\n      axios.get(`/api/maps/${this.props.mapId}`)\r\n      .then(map => {\r\n        this.setState({\r\n          rockIndex: map.data.objects.rockIndex,\r\n          foodIndex: map.data.objects.foodIndex,\r\n          foods: map.data.objects.foods,\r\n          rocks: map.data.objects.rocks,\r\n          teleporters: map.data.objects.teleporters,\r\n          hTerminals: map.data.objects.hTerminals,\r\n          deposits: map.data.objects.deposits,\r\n          houses: map.data.objects.houses,\r\n          title: map.data.title,\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  handleOverlap() {\r\n    this.setState({\r\n      hidden: 'fadein'\r\n    })\r\n    setTimeout(()=>this.setState({\r\n      hidden: 'fadeout'\r\n    }), 2000)\r\n  }\r\n\r\n  handleClickEffect(clickEffect) {\r\n    this.setState({\r\n        clickEffect: clickEffect\r\n    })\r\n  }\r\n\r\n  handleSave (title) {\r\n    return e => {\r\n      e.preventDefault();\r\n      const map = {\r\n        user: this.props.currentUser.id,\r\n        title: title,\r\n        objects: {\r\n            rockIndex: this.state.rockIndex,\r\n            foodIndex: this.state.foodIndex,\r\n            teleporterIndex: this.state.teleporterIndex,\r\n            hTerminalIndex: this.state.hTerminalIndex,\r\n            depositIndex: this.state.depositIndex,\r\n            foods: this.state.foods,\r\n            rocks: this.state.rocks,\r\n            teleporters: this.state.teleporters,\r\n            hTerminals: this.state.hTerminals,\r\n            deposits: this.state.deposits,\r\n            houses: this.state.houses\r\n        }\r\n      }\r\n      if (this.props.mapId) {\r\n        axios.put(`/api/maps/${this.props.mapId}`, map).then(() =>\r\n          this.props.history.push(\"/profile\")\r\n        )\r\n      }\r\n      else {\r\n        axios.post('/api/maps/', map)\r\n      }\r\n    }\r\n  }\r\n\r\n  callbackTest () {\r\n    this.setState({\r\n      imgLoaded: true\r\n    })\r\n  }\r\n\r\n  intersectRect(clickX, clickY, r2) {\r\n    return !(r2.x-150 > clickX+70 || \r\n             r2.x+150 < clickX-70 || \r\n             r2.y-130 > clickY+70 ||\r\n             r2.y+130 < clickY-70);\r\n  }\r\n\r\n\r\n\r\n  getCursorPosition(event) {\r\n      const rect = this.canvas.getBoundingClientRect()\r\n      const canvasx = event.clientX - rect.left\r\n      const canvasy = event.clientY - rect.top\r\n      console.log(\"x: \" + canvasx + \" y: \" + canvasy)\r\n      switch(this.state.clickEffect) {\r\n        case 'remove':\r\n            Object.keys(this.state.rocks).forEach(rockKey => {\r\n              if (Math.sqrt((canvasx-this.state.rocks[rockKey].x)*(canvasx-this.state.rocks[rockKey].x) + (canvasy-this.state.rocks[rockKey].y)*(canvasy-this.state.rocks[rockKey].y)) < this.state.radius) {\r\n                let newState = this.state.rocks\r\n                delete newState[rockKey]\r\n                this.setState({\r\n                  rocks: Object.assign({}, newState)\r\n                })\r\n              }\r\n            })\r\n            Object.keys(this.state.foods).forEach(foodKey => {\r\n              if (Math.sqrt((canvasx-this.state.foods[foodKey].x)*(canvasx-this.state.foods[foodKey].x) + (canvasy-this.state.foods[foodKey].y)*(canvasy-this.state.foods[foodKey].y)) < this.state.radius) {\r\n                let newState = this.state.foods\r\n                delete newState[foodKey]\r\n                this.setState({\r\n                  foods: Object.assign({}, newState)\r\n                })\r\n              }\r\n            })\r\n            Object.keys(this.state.teleporters).forEach(teleporterKey => {\r\n              if (Math.sqrt((canvasx-this.state.teleporters[teleporterKey].x)*(canvasx-this.state.teleporters[teleporterKey].x) + (canvasy-this.state.teleporters[teleporterKey].y)*(canvasy-this.state.teleporters[teleporterKey].y)) < this.state.radius) {\r\n                let newState = this.state.teleporters\r\n                delete newState[teleporterKey]\r\n                this.setState({\r\n                  teleporters: Object.assign({}, newState)\r\n                })\r\n              }\r\n            })\r\n            Object.keys(this.state.hTerminals).forEach(hTerminalKey => {\r\n              if (Math.sqrt((canvasx-this.state.hTerminals[hTerminalKey].x)*(canvasx-this.state.hTerminals[hTerminalKey].x) + (canvasy-this.state.hTerminals[hTerminalKey].y)*(canvasy-this.state.hTerminals[hTerminalKey].y)) < this.state.radius) {\r\n                let newState = this.state.hTerminals\r\n                delete newState[hTerminalKey]\r\n                this.setState({\r\n                  hTerminals: Object.assign({}, newState)\r\n                })\r\n              }\r\n            })\r\n            Object.keys(this.state.deposits).forEach(depositKey => {\r\n              if (Math.sqrt((canvasx-this.state.deposits[depositKey].x)*(canvasx-this.state.deposits[depositKey].x) + (canvasy-this.state.deposits[depositKey].y)*(canvasy-this.state.deposits[depositKey].y)) < this.state.radius) {\r\n                let newState = this.state.deposits\r\n                delete newState[depositKey]\r\n                this.setState({\r\n                  deposits: Object.assign({}, newState)\r\n                })\r\n              }\r\n            })\r\n            break;\r\n        case 'obstacle':\r\n          if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n              console.log('overlapped')\r\n              this.handleOverlap();\r\n              break;\r\n          }\r\n          else {\r\n            this.setState({\r\n              rocks: Object.assign({}, this.state.rocks, {[this.state.rockIndex]: {x: canvasx, y: canvasy}}),\r\n              rockIndex: this.state.rockIndex + 1\r\n            })\r\n            break;\r\n          }\r\n        case 'food':\r\n          if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n            console.log('overlapped')\r\n            this.handleOverlap();\r\n            break;\r\n          }\r\n          else {\r\n            this.setState({\r\n              foods: Object.assign({}, this.state.foods, {[this.state.foodIndex]: {x: canvasx, y: canvasy}}),\r\n              foodIndex: this.state.foodIndex + 1\r\n            })\r\n            break;\r\n          }\r\n        case 'teleporter':\r\n          if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n            console.log('overlapped')\r\n            this.handleOverlap();\r\n            break;\r\n          }\r\n          else {\r\n            this.setState({\r\n              teleporters: Object.assign({}, this.state.teleporters, {[this.state.teleporterIndex]: {x: canvasx, y: canvasy}}),\r\n              clickEffect: 'destination'\r\n            })\r\n            break;\r\n          }\r\n        case 'destination':\r\n            if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n              console.log('overlapped')\r\n              this.handleOverlap();\r\n              break;\r\n            }\r\n            else {\r\n              let newState = Object.assign({}, this.state.teleporters);\r\n              let indexed = Object.assign({}, this.state.teleporters[this.state.teleporterIndex], {newX: canvasx, newY: canvasy})\r\n              newState[this.state.teleporterIndex] = indexed;\r\n              console.log(indexed)\r\n              console.log(`before ${this.state.teleporters}`)\r\n              this.setState({\r\n                teleporters: newState,\r\n                teleporterIndex: this.state.teleporterIndex + 1,\r\n                clickEffect: 'teleporter'\r\n              })\r\n              console.log(this.state.teleporters)\r\n              break;\r\n            }\r\n        case 'hTerminal':\r\n          if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n            console.log('overlapped')\r\n            this.handleOverlap();\r\n            break;\r\n          }\r\n          else {\r\n            this.setState({\r\n              hTerminals: Object.assign({}, this.state.hTerminals, {[this.state.hTerminalIndex]: {x: canvasx, y: canvasy}}),\r\n              hTerminalIndex: this.state.hTerminalIndex + 1\r\n            })\r\n            break;\r\n          }\r\n        case 'deposit':\r\n          if (this.state.houses[0] && this.intersectRect(canvasx, canvasy, this.state.houses[0])) {\r\n            console.log('overlapped')\r\n            this.handleOverlap();\r\n            break;\r\n          }\r\n          else {\r\n            this.setState({\r\n              deposits: Object.assign({}, this.state.deposits, {[this.state.depositIndex]: {x: canvasx, y: canvasy}}),\r\n              depositIndex: this.state.depositIndex + 1\r\n            })\r\n            break;\r\n          }\r\n        case 'house':\r\n          this.setState({\r\n            houses: Object.assign({}, this.state.houses, {[0]: {x: canvasx, y: canvasy}}),\r\n          })\r\n          break;\r\n        default:\r\n          return null;\r\n      }\r\n  }\r\n\r\n    render() {\r\n\r\n      if (this.ctx) {\r\n        this.ctx.clearRect(0,0,GAME_DIMENSIONX, GAME_DIMENSIONY);\r\n\r\n        this.ctx.drawImage(this.image, 0, 0);\r\n\r\n\r\n        Object.values(this.state.rocks).forEach(rock => {\r\n          this.ctx.drawImage(this.refs.rockIcon, 0, 0, 135, 135, rock.x-60, rock.y-60, 135, 135);\r\n        })\r\n\r\n        Object.values(this.state.foods).forEach(food => {\r\n          this.ctx.drawImage(this.refs.foodIcon, 0, 0, 135, 135, food.x-60, food.y-60, 135, 135);\r\n        })\r\n        Object.values(this.state.teleporters).forEach(teleporter => {\r\n          this.ctx.drawImage(this.refs.teleporterIcon, 0, 0, 135, 135, teleporter.x-60, teleporter.y-60, 135, 135);\r\n          this.ctx.drawImage(this.refs.destinationIcon, 0, 0, 135, 135, teleporter.newX-60, teleporter.newY-60, 135, 135);\r\n          console.log(this.state.teleporters)\r\n        })\r\n        Object.values(this.state.hTerminals).forEach(hTerminal => {\r\n          this.ctx.drawImage(this.refs.hTerminalIcon, 0, 0, 135, 135, hTerminal.x-60, hTerminal.y-60, 135, 135);\r\n        })\r\n        Object.values(this.state.deposits).forEach(deposit => {\r\n          this.ctx.drawImage(this.refs.depositIcon, 0, 0, 135, 135, deposit.x-60, deposit.y-60, 135, 135);\r\n        })\r\n        Object.values(this.state.houses).forEach(house => {\r\n          this.ctx.drawImage(this.refs.houseIcon, 0, 0, 300, 260, house.x-150, house.y-130, 300, 260);\r\n        })\r\n      }\r\n        return(\r\n          <div className=\"testsize\">\r\n            \r\n            <canvas id=\"canvas\" onKeyPress={this.handleKey} onClick={this.getCursorPosition} ref=\"canvas\" className={this.state.clickEffect} width={5000} height={5000} />\r\n\r\n            <img ref=\"foodIcon\" alt=\"\" src={foodIcon} className=\"hidden\" />\r\n            <img ref=\"rockIcon\" alt=\"\" src={rockIcon} className=\"hidden\" />\r\n            <img ref=\"houseIcon\" alt=\"\" src={houseIcon} className=\"hidden\" />\r\n            <img ref=\"teleporterIcon\" alt=\"\" src={teleporterIcon} className=\"hidden\" />\r\n            <img ref=\"destinationIcon\" alt=\"\" src={destinationIcon} className=\"hidden\" />\r\n            <img ref=\"hTerminalIcon\" alt=\"\" src={hTerminalIcon} className=\"hidden\" />\r\n            <img ref=\"depositIcon\" alt=\"\" src={depositIcon} className=\"hidden\" />\r\n            <img ref=\"worldMap\" alt=\"\" onLoad={this.callbackTest} src={worldMap} className=\"hidden\" />\r\n            <div className={`overlap ${this.state.hidden}`}>\r\n                  <span>Cannot place object on starting position</span>\r\n            </div>\r\n            <MapEditorMenuContainer title={this.state.title} handleClickEffect={this.handleClickEffect} handleSave={this.handleSave} />\r\n         </div> \r\n        )\r\n      }\r\n    }\r\n\r\nexport default Canvas"]},"metadata":{},"sourceType":"module"}