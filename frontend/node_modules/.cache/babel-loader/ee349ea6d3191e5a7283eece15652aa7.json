{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\ndocument.addEventListener('DOMContentLoaded', () => {\n  let store = configureStore({}); // If a returning user has a session token stored in localStorage\n\n  if (localStorage.jwtToken) {\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken); // Decode the token to obtain the user's information\n\n    const decodedUser = jwt_decode(localStorage.jwtToken); // Create a preconfigured state we can immediately add to our store\n\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        user: decodedUser\n      }\n    };\n    store = configureStore(preloadedState);\n    const currentTime = Date.now() / 1000; // If the user's token has expired\n\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = '/login';\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  }\n\n  Window.getState = store.getState(); // Render our root component and pass in the store as a prop\n\n  const root = document.getElementById('root');\n  ReactDOM.render( /*#__PURE__*/React.createElement(Root, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }), root);\n});","map":{"version":3,"sources":["/mnt/c/Users/Novirius/Documents/aAProjects/MERNStackProject/frontend/src/index.js"],"names":["React","ReactDOM","Root","configureStore","jwt_decode","setAuthToken","logout","document","addEventListener","store","localStorage","jwtToken","decodedUser","preloadedState","session","isAuthenticated","user","currentTime","Date","now","exp","dispatch","window","location","href","Window","getState","root","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAChD,MAAIC,KAAK,GAAGN,cAAc,CAAC,EAAD,CAA1B,CADgD,CAGhD;;AACA,MAAIO,YAAY,CAACC,QAAjB,EAA2B;AAEvB;AACAN,IAAAA,YAAY,CAACK,YAAY,CAACC,QAAd,CAAZ,CAHuB,CAKvB;;AACA,UAAMC,WAAW,GAAGR,UAAU,CAACM,YAAY,CAACC,QAAd,CAA9B,CANuB,CAQvB;;AACA,UAAME,cAAc,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBC,QAAAA,IAAI,EAAEJ;AAA/B;AAAX,KAAvB;AAEAH,IAAAA,KAAK,GAAGN,cAAc,CAACU,cAAD,CAAtB;AAEA,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CAbuB,CAevB;;AACA,QAAIP,WAAW,CAACQ,GAAZ,GAAkBH,WAAtB,EAAmC;AAC/B;AACAR,MAAAA,KAAK,CAACY,QAAN,CAAef,MAAM,EAArB;AACAgB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACH;AACJ,GArBD,MAqBO;AACH;AACAf,IAAAA,KAAK,GAAGN,cAAc,CAAC,EAAD,CAAtB;AACH;;AACDsB,EAAAA,MAAM,CAACC,QAAP,GAAkBjB,KAAK,CAACiB,QAAN,EAAlB,CA7BgD,CA8BhD;;AACA,QAAMC,IAAI,GAAGpB,QAAQ,CAACqB,cAAT,CAAwB,MAAxB,CAAb;AAEA3B,EAAAA,QAAQ,CAAC4B,MAAT,eAAgB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEpB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAAwCkB,IAAxC;AACH,CAlCD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/root';\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let store = configureStore({});\n\n    // If a returning user has a session token stored in localStorage\n    if (localStorage.jwtToken) {\n\n        // Set the token as a common header for all axios requests\n        setAuthToken(localStorage.jwtToken);\n\n        // Decode the token to obtain the user's information\n        const decodedUser = jwt_decode(localStorage.jwtToken);\n\n        // Create a preconfigured state we can immediately add to our store\n        const preloadedState = { session: { isAuthenticated: true, user: decodedUser } };\n\n        store = configureStore(preloadedState);\n\n        const currentTime = Date.now() / 1000;\n\n        // If the user's token has expired\n        if (decodedUser.exp < currentTime) {\n            // Logout the user and redirect to the login page\n            store.dispatch(logout());\n            window.location.href = '/login';\n        }\n    } else {\n        // If this is a first time user, start with an empty store\n        store = configureStore({});\n    }\n    Window.getState = store.getState();\n    // Render our root component and pass in the store as a prop\n    const root = document.getElementById('root');\n\n    ReactDOM.render(<Root store={store} />, root);\n});\n"]},"metadata":{},"sourceType":"module"}